# -*- coding: utf-8 -*-
"""AUTISM

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DeqPKJpBN_tE1CLuUL5MMRtFk92soitW
"""

from tensorflow.keras.layers import Input, Lambda, Dense, Flatten
from tensorflow.keras.models import Model
from tensorflow.keras.applications.inception_v3 import InceptionV3
from tensorflow.keras.applications.inception_v3 import preprocess_input
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img
from tensorflow.keras.models import Sequential
import numpy as np
from glob import glob

IMAGE_SIZE=[224,224]
train_path='/content/drive/MyDrive/archive (3)/Facial images dataset for Autism Detection/train'
test_path='/content/drive/MyDrive/archive (3)/Facial images dataset for Autism Detection/test'

inception=InceptionV3(input_shape=IMAGE_SIZE+[3],weights='imagenet',include_top=False)

for layer in inception.layers:
  layer.trainable=False

folders=glob('/content/drive/MyDrive/archive (3)/Facial images dataset for Autism Detection/train/*')

folders

x=Flatten()(inception.output)

prediction=Dense(len(folders),activation='softmax')(x)

model=Model(inputs=inception.input,outputs=prediction)

model.summary()

model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

from tensorflow.keras.preprocessing.image import ImageDataGenerator
train_datagen=ImageDataGenerator(rescale=1./255,shear_range=0.2,zoom_range=0.2,horizontal_flip=True)
test_datagen=ImageDataGenerator(rescale=1./255)

training_set=train_datagen.flow_from_directory('/content/drive/MyDrive/archive (3)/Facial images dataset for Autism Detection/train',target_size=(224,224),batch_size=16,class_mode='categorical')

test_set=test_datagen.flow_from_directory('/content/drive/MyDrive/archive (3)/Facial images dataset for Autism Detection/test',target_size=(224,224),batch_size=16,class_mode='categorical')

def evaluate(individual):
  conv_layers=[int(individual[0])],int(individual[1]),
  dense_layers=[int(individual[2])]
  dropout_rate=individual[3]
  model=create_cnn_model(input_shape=(X_train.shape[1],X_train.shape[2],1),
  num_classes=y_train.shapes[1],conv_layers=conv_layers,dense_layers=dense_layers,dropout_rate=dropout_rate)
  history=train_model(model,X_train,y_train,X_test,y_test,epochs=100,batch_size=16)
  val_acc=max(history.history['val_accuracy'])
  return val_acc,

model.fit(training_set,validation_data=test_set,epochs=100,steps_per_epoch=len(training_set),validation_steps=len(test_set))

!pip install deap

from deap import base, creator, tools,algorithms
creator.create("FitnessMax",base.Fitness,weights=(1.0,))
creator.create("Individual",list,fitness=creator.FitnessMax)
toolbox=base.Toolbox()
toolbox.register("attr_float",np.random.uniform,0.1,0.5)
toolbox.register("attr_int", np.random.randint, 16, 128) # Register a function to generate integers
toolbox.register("individual",tools.initCycle,creator.Individual,(toolbox.attr_int,toolbox.attr_int,toolbox.attr_int,toolbox.attr_float),n=1)
toolbox.register("population",tools.initRepeat,list,toolbox.individual)
toolbox.register("evaluate",evaluate)
toolbox.register("mate",tools.cxBlend,alpha=0.5)
toolbox.register("mutate",tools.mutPolynomialBounded,low=[16,16,16,0.1],up=[128,128,128,0.5],eta=0.1,indpb=0.2)
toolbox.register("select",tools.selTournament,tournsize=3)

from google.colab import drive
drive.mount('/content/drive')

def differential_evolution_optimization(pop_size,generations=5):
  pop=toolbox.population(n=pop_size)
  algorithms.eaSimple(pop,toolbox,cxpb=0.5,mutpb=0.2,ngen=generations,stats=None,halloffame=None,verbose=True)
  return pop
  pop=differential_evolution_optimization()
  best_individual=tools.selBest(pop,k=1)[0]
  print(f'Best indivual: {best_individual}')
  best_conv_layers=[int(best_individual[0]),int(best_individual[1])]
  best_dense_layers=[int(best_individual[2])]
  best_dropout_rate=best_individual[3]